---
description: 
globs: 
alwaysApply: false
---
# Project Requirements

## Overview
I want to create a PWA web app for mobile to be used as a personal assistant. The main objective will be for the user to use this app to track their personal expense via audio and chat input to Google sheet in their google account. 
The app will take user name as input and then ask user to connect to their google mail to get access to google sheets , create a new google sheet ( if does not exists) and confirm the input before adding it to the sheet based on predefined columns 

## Security Architecture
**Critical Update**: The application uses **Vercel Serverless Functions** for secure API key management and sensitive operations. This prevents exposure of API keys in client-side code.

### Serverless Function Architecture
- **`/api/config.js`**: Provides safe-to-expose configuration (Google Client ID, app settings)
- **`/api/parse-expense.js`**: Handles OpenAI API calls server-side with secure API key storage
- **`/api/google-sheets.js`**: Manages Google Sheets operations (find, create, add expenses) server-side
- **Environment Variables**: All sensitive API keys stored in Vercel environment variables

## Functional Requirements

It will use open AI API for text parsing via serverless functions. Google Oauth client ID for connecting to the google (client ID is safe to expose, OAuth tokens handled securely). 
The code will be committed to github and later deployed via vercel to be used in phone .
Choose technology of your choice for best PWA .

### Core Features
- [x] Feature 1: Onboarding screen taking user name
- [x] Feature 2: Google authentication flow to connect to google account and getting access to google sheet 
- [x] Feature 3: Chat based window with audio and text input, for user to provide expense input, confirm it with the user before adding it to the sheet. The audio input includes hindi and english 
- [x] Feature 4: profile icon at the top right in chat window to show the user name, email address button 
- [x] Feature 5: **Serverless Security**: All sensitive operations handled via Vercel serverless functions
- [x] Feature 6: **Duplicate Sheet Prevention**: Intelligent sheet finding to avoid creating multiple sheets
- [x] Feature 7: **Enhanced UI**: Modern glassmorphism design with animated backgrounds

## Technical Requirements

### Technology Stack
- **Frontend**: Vanilla HTML5, CSS3, JavaScript ES6 (PWA)
- **Backend**: Vercel Serverless Functions (Node.js)
- **Security**: Environment variables for API keys, server-side processing
- **Database**: Google Sheets (via Google Sheets API)
- **Authentication**: Google OAuth 2.0 (Google Identity Services)
- **APIs**: OpenAI GPT-3.5-turbo (server-side), Google Sheets API, Google Drive API
- **Deployment**: GitHub → Vercel
- **Testing**: Jest with 70+ unit tests, ~20% code coverage

### Architecture Components
```
Frontend (PWA)
├── Configuration loaded from /api/config
├── Authentication with Google OAuth
├── Chat interface with voice/text input
├── Expense confirmation UI
└── Profile management

Serverless Functions
├── /api/config.js - Safe configuration delivery
├── /api/parse-expense.js - OpenAI text parsing
└── /api/google-sheets.js - Sheet operations
    ├── findSheet - Search existing sheets
    ├── createSheet - Create new sheet with headers
    └── addExpense - Add expense to sheet
```

## Non-Functional Requirements

### Security
- [x] **API Key Protection**: All sensitive keys stored in Vercel environment variables
- [x] **Server-side Processing**: OpenAI API calls never from client
- [x] **CORS Configuration**: Proper CORS headers for API endpoints
- [x] **Token Validation**: OAuth token validation for Google API calls
- [x] **Input Validation**: Comprehensive input validation for all expense data

### Usability
- [x] Intuitive user interface with modern design
- [x] Cross-browser compatibility
- [x] Mobile-responsive design
- [x] Glassmorphism UI effects
- [x] Animated backgrounds and transitions
- [x] Voice input support (English, Hindi)

### Performance
- [x] Serverless functions for scalability
- [x] Lazy loading of configuration
- [x] Efficient caching strategies
- [x] PWA capabilities for offline functionality

## API Requirements

### Serverless Endpoints
```
GET /api/config
- Returns safe configuration (Google Client ID, app settings)
- No authentication required

POST /api/parse-expense
- Parses expense text using OpenAI API
- Body: { text: string }
- Returns: { amount, category, description, paymentMode, date }

POST /api/google-sheets
- Handles Google Sheets operations
- Body: { action, accessToken, ...params }
- Actions: 'findSheet', 'createSheet', 'addExpense'
```

### Authentication
- Google OAuth 2.0 with Google Identity Services
- Scopes: `https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive.readonly`
- Access tokens passed to serverless functions for authenticated operations

## Environment Variables

### Production (Vercel)
```
GOOGLE_CLIENT_ID=your-google-client-id
OPENAI_API_KEY=your-openai-api-key
NODE_ENV=production
```

### Development
```
GOOGLE_CLIENT_ID=your-google-client-id
OPENAI_API_KEY=your-openai-api-key
```

## Testing Requirements

### Test Coverage
- [x] **70 passing tests** across multiple test suites
- [x] **19.09% statement coverage**, 26.53% function coverage
- [x] Unit tests for core functions (parseExpenseData, formatCurrency, etc.)
- [x] Integration tests for app functions (authentication, sheet operations)
- [x] Mock configurations for testing environment

### Test Types
- [x] Unit tests for utility functions
- [x] Integration tests for API interactions
- [x] Mock testing for external dependencies
- [x] Edge case testing for expense parsing
- [x] Error handling validation

## Deployment Requirements

### Environment Setup
1. **GitHub Repository**: Source code management
2. **Vercel Project**: Connected to GitHub for automatic deployments
3. **Environment Variables**: Set in Vercel dashboard
4. **Domain Configuration**: Custom domain or Vercel subdomain
5. **SSL Certificate**: Automatic HTTPS via Vercel

### Build Process
```json
{
  "scripts": {
    "build": "vite build",
    "start": "serve -s . -l 3000",
    "test": "jest --coverage"
  }
}
```

## Security Best Practices Implemented

### API Key Management
- ✅ **No hardcoded keys**: All sensitive data in environment variables
- ✅ **Server-side processing**: OpenAI API calls never from client
- ✅ **Separation of concerns**: Public config separate from private keys
- ✅ **Version control safety**: `.env` files in `.gitignore`

### Authentication Security
- ✅ **OAuth 2.0 flow**: Industry standard authentication
- ✅ **Token validation**: Server-side token verification
- ✅ **Scope limitation**: Minimal required permissions
- ✅ **Access token handling**: Secure token storage and transmission

## Success Criteria
- [x] All functional requirements implemented
- [x] Serverless security architecture deployed
- [x] Performance benchmarks met
- [x] Security requirements satisfied (API keys protected)
- [x] User acceptance testing passed
- [x] Comprehensive test coverage achieved
- [x] Modern UI/UX implemented
- [x] Documentation completed

## Learning Outcomes
- ✅ **Serverless Functions**: Vercel serverless function development
- ✅ **API Security**: Secure API key management in production
- ✅ **OAuth Integration**: Google OAuth 2.0 implementation
- ✅ **Testing**: Jest testing framework with mocking
- ✅ **PWA Development**: Progressive Web App features
- ✅ **Modern UI**: Glassmorphism and animation techniques

## Deployment Instructions

### 1. Vercel Setup
```bash
# Install Vercel CLI
npm i -g vercel

# Deploy to Vercel
vercel --prod
```

### 2. Environment Variables (Vercel Dashboard)
- Go to Vercel Project Settings
- Add Environment Variables:
  - `GOOGLE_CLIENT_ID`: Your Google OAuth client ID
  - `OPENAI_API_KEY`: Your OpenAI API key

### 3. Domain Configuration
- Configure custom domain or use Vercel subdomain
- SSL certificate automatically provisioned

---

*Last updated: January 2025*
*Version: 2.0 - Serverless Security Architecture*
